apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dunksense.fullname" . }}-metrics
  labels:
    {{- include "dunksense.labels" . | nindent 4 }}
    app.kubernetes.io/component: metrics-service
spec:
  {{- if not .Values.metricsService.autoscaling.enabled }}
  replicas: {{ .Values.metricsService.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "dunksense.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: metrics-service
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
      labels:
        {{- include "dunksense.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: metrics-service
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "dunksense.serviceAccountName" . }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
        - name: metrics-service
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          image: "{{ .Values.metricsService.image.repository }}:{{ .Values.metricsService.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.metricsService.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.metricsService.service.targetPort }}
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            - name: SERVER_PORT
              value: "{{ .Values.metricsService.service.targetPort }}"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "dunksense.fullname" . }}-secret
                  key: database-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "dunksense.fullname" . }}-secret
                  key: redis-password
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "dunksense.fullname" . }}-secret
                  key: jwt-secret
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "dunksense.fullname" . }}-secret
                  key: openai-api-key
          envFrom:
            - configMapRef:
                name: {{ include "dunksense.fullname" . }}-config
          {{- if .Values.metricsService.healthCheck.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.metricsService.healthCheck.path }}
              port: http
            initialDelaySeconds: {{ .Values.metricsService.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.metricsService.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.metricsService.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.metricsService.healthCheck.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.metricsService.healthCheck.path }}
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: {{ .Values.metricsService.healthCheck.timeoutSeconds }}
            failureThreshold: 3
          {{- end }}
          resources:
            {{- toYaml .Values.metricsService.resources | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/cache
            {{- if .Values.env.TLS_ENABLED }}
            - name: tls-certs
              mountPath: /etc/tls
              readOnly: true
            {{- end }}
      volumes:
        - name: tmp
          emptyDir: {}
        - name: cache
          emptyDir: {}
        {{- if .Values.env.TLS_ENABLED }}
        - name: tls-certs
          secret:
            secretName: {{ include "dunksense.fullname" . }}-tls
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---
{{- if .Values.mlPipeline.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dunksense.fullname" . }}-ml-pipeline
  labels:
    {{- include "dunksense.labels" . | nindent 4 }}
    app.kubernetes.io/component: ml-pipeline
spec:
  replicas: {{ .Values.mlPipeline.replicaCount }}
  selector:
    matchLabels:
      {{- include "dunksense.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: ml-pipeline
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        {{- include "dunksense.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: ml-pipeline
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "dunksense.serviceAccountName" . }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
        - name: ml-pipeline
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          image: "{{ .Values.mlPipeline.image.repository }}:{{ .Values.mlPipeline.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.mlPipeline.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9090
              protocol: TCP
          envFrom:
            - configMapRef:
                name: {{ include "dunksense.fullname" . }}-config
          resources:
            {{- toYaml .Values.mlPipeline.resources | nindent 12 }}
          volumeMounts:
            - name: models
              mountPath: /app/models
            - name: cache
              mountPath: /app/cache
      volumes:
        - name: models
          persistentVolumeClaim:
            claimName: {{ include "dunksense.fullname" . }}-models
        - name: cache
          persistentVolumeClaim:
            claimName: {{ include "dunksense.fullname" . }}-cache
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }} 